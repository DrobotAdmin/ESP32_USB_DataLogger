#!/usr/bin/env python3
"""
RTC Time Setter - –í—Å—Ç–∞–Ω–æ–≤–ª—é—î —Å–∏—Å—Ç–µ–º–Ω–∏–π —á–∞—Å –Ω–∞ RTC –≥–æ–¥–∏–Ω–Ω–∏–∫ ESP32
"""

import serial
import serial.tools.list_ports
import datetime
import time
import sys

def find_esp32_port():
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å COM –ø–æ—Ä—Ç ESP32"""
    ports = serial.tools.list_ports.comports()
    
    # –®—É–∫–∞—î–º–æ ESP32 –∑–∞ –æ–ø–∏—Å–æ–º
    esp32_keywords = ['ESP32', 'Silicon Labs', 'CH340', 'CP210', 'USB Serial']
    
    for port in ports:
        for keyword in esp32_keywords:
            if keyword.lower() in port.description.lower():
                return port.device
    
    # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ, –ø–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –ø–æ—Ä—Ç–∏
    print("ESP32 –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ. –î–æ—Å—Ç—É–ø–Ω—ñ –ø–æ—Ä—Ç–∏:")
    for i, port in enumerate(ports):
        print(f"{i+1}. {port.device} - {port.description}")
    
    if ports:
        try:
            choice = int(input("–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç—É: ")) - 1
            if 0 <= choice < len(ports):
                return ports[choice].device
        except ValueError:
            pass
    
    return None

def set_rtc_time():
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –ø–æ—Ç–æ—á–Ω–∏–π —Å–∏—Å—Ç–µ–º–Ω–∏–π —á–∞—Å –Ω–∞ RTC"""
    print("=== RTC Time Setter ===")
    print("–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —á–∞—Å—É –Ω–∞ RTC –≥–æ–¥–∏–Ω–Ω–∏–∫")
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ ESP32
    port = find_esp32_port()
    if not port:
        print("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ ESP32. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —â–æ –ø—Ä–∏—Å—Ç—Ä—ñ–π –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ.")
        return False
    
    print(f"–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ {port}...")
    
    try:
        # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ ESP32
        ser = serial.Serial(port, 115200, timeout=2)
        time.sleep(2)  # –ß–µ–∫–∞—î–º–æ —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ—ó –∑'—î–¥–Ω–∞–Ω–Ω—è
        
        print("–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ!")
        
        # –û—á–∏—â—É—î–º–æ –±—É—Ñ–µ—Ä
        ser.flushInput()
        ser.flushOutput()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å–∏—Å—Ç–µ–º–Ω–∏–π —á–∞—Å
        now = datetime.datetime.now()
        time_str = now.strftime("%Y-%m-%d %H:%M:%S")
        
        print(f"–°–∏—Å—Ç–µ–º–Ω–∏–π —á–∞—Å: {time_str}")
        print("–í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –Ω–∞ RTC...")
        
        # –§–æ—Ä–º—É—î–º–æ –∫–æ–º–∞–Ω–¥—É –¥–ª—è ESP32
        command = f"settime {time_str}\n"
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥—É
        ser.write(command.encode('utf-8'))
        ser.flush()
        
        # –ß–µ–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        print("–û—á—ñ–∫—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ ESP32...")
        start_time = time.time()
        
        while time.time() - start_time < 5:  # –ß–µ–∫–∞—î–º–æ –¥–æ 5 —Å–µ–∫—É–Ω–¥
            if ser.in_waiting > 0:
                response = ser.readline().decode('utf-8').strip()
                print(f"ESP32: {response}")
                
                if "–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" in response.lower() or "—á–∞—Å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ" in response.lower():
                    print("‚úÖ –ß–∞—Å —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π —á–∞—Å
                    print("–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π —á–∞—Å...")
                    ser.write(b"gettime\n")
                    ser.flush()
                    time.sleep(0.5)
                    
                    if ser.in_waiting > 0:
                        check_response = ser.readline().decode('utf-8').strip()
                        print(f"–ß–∞—Å –Ω–∞ RTC: {check_response}")
                    
                    return True
            
            time.sleep(0.1)
        
        print("‚ö†Ô∏è –ù–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ ESP32")
        return False
        
    except serial.SerialException as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ø–æ—Ä—Ç—É {port}: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        return False
    finally:
        if 'ser' in locals():
            ser.close()
            print("–ó'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ.")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    try:
        success = set_rtc_time()
        
        if success:
            print("\nüéâ –û–ø–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
        else:
            print("\n‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —á–∞—Å –Ω–∞ RTC")
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –û–ø–µ—Ä–∞—Ü—ñ—è –ø–µ—Ä–µ—Ä–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    
    input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –≤–∏—Ö–æ–¥—É...")

if __name__ == "__main__":
    main()
